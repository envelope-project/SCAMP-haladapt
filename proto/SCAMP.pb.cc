// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCAMP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SCAMP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SCAMP {

namespace {

const ::google::protobuf::Descriptor* RepeatedUInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatedUInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatedULong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatedULong_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatedFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatedFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatedDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatedDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileData_reflection_ = NULL;
struct ProfileDataOneofInstance {
  const ::SCAMP::RepeatedUInt* uint32_value_;
  const ::SCAMP::RepeatedULong* uint64_value_;
  const ::SCAMP::RepeatedFloat* float_value_;
  const ::SCAMP::RepeatedDouble* double_value_;
}* ProfileData_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Profile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCAMPTileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCAMPTileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCAMPArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCAMPArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SCAMPProfileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SCAMPPrecisionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SCAMP_2eproto() {
  protobuf_AddDesc_SCAMP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SCAMP.proto");
  GOOGLE_CHECK(file != NULL);
  RepeatedUInt_descriptor_ = file->message_type(0);
  static const int RepeatedUInt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedUInt, value_),
  };
  RepeatedUInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatedUInt_descriptor_,
      RepeatedUInt::default_instance_,
      RepeatedUInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedUInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedUInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatedUInt));
  RepeatedULong_descriptor_ = file->message_type(1);
  static const int RepeatedULong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedULong, value_),
  };
  RepeatedULong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatedULong_descriptor_,
      RepeatedULong::default_instance_,
      RepeatedULong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedULong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedULong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatedULong));
  RepeatedFloat_descriptor_ = file->message_type(2);
  static const int RepeatedFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedFloat, value_),
  };
  RepeatedFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatedFloat_descriptor_,
      RepeatedFloat::default_instance_,
      RepeatedFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatedFloat));
  RepeatedDouble_descriptor_ = file->message_type(3);
  static const int RepeatedDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedDouble, value_),
  };
  RepeatedDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatedDouble_descriptor_,
      RepeatedDouble::default_instance_,
      RepeatedDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatedDouble));
  ProfileData_descriptor_ = file->message_type(4);
  static const int ProfileData_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ProfileData_default_oneof_instance_, uint32_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ProfileData_default_oneof_instance_, uint64_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ProfileData_default_oneof_instance_, float_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ProfileData_default_oneof_instance_, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileData, Data_),
  };
  ProfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfileData_descriptor_,
      ProfileData::default_instance_,
      ProfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileData, _unknown_fields_),
      -1,
      ProfileData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileData, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfileData));
  Profile_descriptor_ = file->message_type(5);
  static const int Profile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, type_),
  };
  Profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Profile_descriptor_,
      Profile::default_instance_,
      Profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Profile));
  SCAMPTileInfo_descriptor_ = file->message_type(6);
  static const int SCAMPTileInfo_offsets_[1] = {
  };
  SCAMPTileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCAMPTileInfo_descriptor_,
      SCAMPTileInfo::default_instance_,
      SCAMPTileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPTileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPTileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCAMPTileInfo));
  SCAMPArgs_descriptor_ = file->message_type(7);
  static const int SCAMPArgs_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, timeseries_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, timeseries_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, profile_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, profile_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, has_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, max_tile_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, distributed_start_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, distributed_start_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, distance_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, precision_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, profile_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, computing_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, computing_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, keep_rows_separate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, is_aligned_),
  };
  SCAMPArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCAMPArgs_descriptor_,
      SCAMPArgs::default_instance_,
      SCAMPArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAMPArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCAMPArgs));
  SCAMPProfileType_descriptor_ = file->enum_type(0);
  SCAMPPrecisionType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SCAMP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatedUInt_descriptor_, &RepeatedUInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatedULong_descriptor_, &RepeatedULong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatedFloat_descriptor_, &RepeatedFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatedDouble_descriptor_, &RepeatedDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfileData_descriptor_, &ProfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Profile_descriptor_, &Profile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCAMPTileInfo_descriptor_, &SCAMPTileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCAMPArgs_descriptor_, &SCAMPArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SCAMP_2eproto() {
  delete RepeatedUInt::default_instance_;
  delete RepeatedUInt_reflection_;
  delete RepeatedULong::default_instance_;
  delete RepeatedULong_reflection_;
  delete RepeatedFloat::default_instance_;
  delete RepeatedFloat_reflection_;
  delete RepeatedDouble::default_instance_;
  delete RepeatedDouble_reflection_;
  delete ProfileData::default_instance_;
  delete ProfileData_default_oneof_instance_;
  delete ProfileData_reflection_;
  delete Profile::default_instance_;
  delete Profile_reflection_;
  delete SCAMPTileInfo::default_instance_;
  delete SCAMPTileInfo_reflection_;
  delete SCAMPArgs::default_instance_;
  delete SCAMPArgs_reflection_;
}

void protobuf_AddDesc_SCAMP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SCAMP.proto\022\005SCAMP\"\035\n\014RepeatedUInt\022\r\n\005"
    "value\030\001 \003(\r\"\036\n\rRepeatedULong\022\r\n\005value\030\001 "
    "\003(\004\"\036\n\rRepeatedFloat\022\r\n\005value\030\001 \003(\002\"\037\n\016R"
    "epeatedDouble\022\r\n\005value\030\001 \003(\001\"\314\001\n\013Profile"
    "Data\022+\n\014uint32_value\030\001 \001(\0132\023.SCAMP.Repea"
    "tedUIntH\000\022,\n\014uint64_value\030\002 \001(\0132\024.SCAMP."
    "RepeatedULongH\000\022+\n\013float_value\030\003 \001(\0132\024.S"
    "CAMP.RepeatedFloatH\000\022-\n\014double_value\030\004 \001"
    "(\0132\025.SCAMP.RepeatedDoubleH\000B\006\n\004Data\"R\n\007P"
    "rofile\022 \n\004data\030\001 \003(\0132\022.SCAMP.ProfileData"
    "\022%\n\004type\030\002 \001(\0162\027.SCAMP.SCAMPProfileType\""
    "\017\n\rSCAMPTileInfo\"\322\003\n\tSCAMPArgs\022\024\n\014timese"
    "ries_a\030\001 \003(\001\022\024\n\014timeseries_b\030\002 \003(\001\022!\n\tpr"
    "ofile_a\030\003 \001(\0132\016.SCAMP.Profile\022!\n\tprofile"
    "_b\030\004 \001(\0132\016.SCAMP.Profile\022\r\n\005has_b\030\005 \001(\010\022"
    "\016\n\006window\030\006 \001(\004\022\025\n\rmax_tile_size\030\007 \001(\004\022\035"
    "\n\025distributed_start_row\030\010 \001(\003\022\035\n\025distrib"
    "uted_start_col\030\t \001(\003\022\032\n\022distance_thresho"
    "ld\030\n \001(\001\0221\n\016precision_type\030\013 \001(\0162\031.SCAMP"
    ".SCAMPPrecisionType\022-\n\014profile_type\030\014 \001("
    "\0162\027.SCAMP.SCAMPProfileType\022\026\n\016computing_"
    "rows\030\r \001(\010\022\031\n\021computing_columns\030\016 \001(\010\022\032\n"
    "\022keep_rows_separate\030\017 \001(\010\022\022\n\nis_aligned\030"
    "\020 \001(\010*\275\001\n\020SCAMPProfileType\022\030\n\024PROFILE_TY"
    "PE_INVALID\020\000\022\032\n\026PROFILE_TYPE_1NN_INDEX\020\001"
    "\022\033\n\027PROFILE_TYPE_SUM_THRESH\020\002\022!\n\035PROFILE"
    "_TYPE_FREQUENCY_THRESH\020\003\022\024\n\020PROFILE_TYPE"
    "_KNN\020\004\022\035\n\031PROFILE_TYPE_1NN_MULTIDIM\020\005*l\n"
    "\022SCAMPPrecisionType\022\025\n\021PRECISION_INVALID"
    "\020\000\022\024\n\020PRECISION_SINGLE\020\001\022\023\n\017PRECISION_MI"
    "XED\020\002\022\024\n\020PRECISION_DOUBLE\020\003", 1227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SCAMP.proto", &protobuf_RegisterTypes);
  RepeatedUInt::default_instance_ = new RepeatedUInt();
  RepeatedULong::default_instance_ = new RepeatedULong();
  RepeatedFloat::default_instance_ = new RepeatedFloat();
  RepeatedDouble::default_instance_ = new RepeatedDouble();
  ProfileData::default_instance_ = new ProfileData();
  ProfileData_default_oneof_instance_ = new ProfileDataOneofInstance;
  Profile::default_instance_ = new Profile();
  SCAMPTileInfo::default_instance_ = new SCAMPTileInfo();
  SCAMPArgs::default_instance_ = new SCAMPArgs();
  RepeatedUInt::default_instance_->InitAsDefaultInstance();
  RepeatedULong::default_instance_->InitAsDefaultInstance();
  RepeatedFloat::default_instance_->InitAsDefaultInstance();
  RepeatedDouble::default_instance_->InitAsDefaultInstance();
  ProfileData::default_instance_->InitAsDefaultInstance();
  Profile::default_instance_->InitAsDefaultInstance();
  SCAMPTileInfo::default_instance_->InitAsDefaultInstance();
  SCAMPArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SCAMP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SCAMP_2eproto {
  StaticDescriptorInitializer_SCAMP_2eproto() {
    protobuf_AddDesc_SCAMP_2eproto();
  }
} static_descriptor_initializer_SCAMP_2eproto_;
const ::google::protobuf::EnumDescriptor* SCAMPProfileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAMPProfileType_descriptor_;
}
bool SCAMPProfileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SCAMPPrecisionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAMPPrecisionType_descriptor_;
}
bool SCAMPPrecisionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedUInt::kValueFieldNumber;
#endif  // !_MSC_VER

RepeatedUInt::RepeatedUInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.RepeatedUInt)
}

void RepeatedUInt::InitAsDefaultInstance() {
}

RepeatedUInt::RepeatedUInt(const RepeatedUInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.RepeatedUInt)
}

void RepeatedUInt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedUInt::~RepeatedUInt() {
  // @@protoc_insertion_point(destructor:SCAMP.RepeatedUInt)
  SharedDtor();
}

void RepeatedUInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedUInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedUInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatedUInt_descriptor_;
}

const RepeatedUInt& RepeatedUInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

RepeatedUInt* RepeatedUInt::default_instance_ = NULL;

RepeatedUInt* RepeatedUInt::New() const {
  return new RepeatedUInt;
}

void RepeatedUInt::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatedUInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.RepeatedUInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (tag == 8) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.RepeatedUInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.RepeatedUInt)
  return false;
#undef DO_
}

void RepeatedUInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.RepeatedUInt)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.RepeatedUInt)
}

::google::protobuf::uint8* RepeatedUInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.RepeatedUInt)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.RepeatedUInt)
  return target;
}

int RepeatedUInt::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedUInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatedUInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatedUInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatedUInt::MergeFrom(const RepeatedUInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatedUInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedUInt::CopyFrom(const RepeatedUInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedUInt::IsInitialized() const {

  return true;
}

void RepeatedUInt::Swap(RepeatedUInt* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatedUInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatedUInt_descriptor_;
  metadata.reflection = RepeatedUInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedULong::kValueFieldNumber;
#endif  // !_MSC_VER

RepeatedULong::RepeatedULong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.RepeatedULong)
}

void RepeatedULong::InitAsDefaultInstance() {
}

RepeatedULong::RepeatedULong(const RepeatedULong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.RepeatedULong)
}

void RepeatedULong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedULong::~RepeatedULong() {
  // @@protoc_insertion_point(destructor:SCAMP.RepeatedULong)
  SharedDtor();
}

void RepeatedULong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedULong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedULong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatedULong_descriptor_;
}

const RepeatedULong& RepeatedULong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

RepeatedULong* RepeatedULong::default_instance_ = NULL;

RepeatedULong* RepeatedULong::New() const {
  return new RepeatedULong;
}

void RepeatedULong::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatedULong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.RepeatedULong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 value = 1;
      case 1: {
        if (tag == 8) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.RepeatedULong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.RepeatedULong)
  return false;
#undef DO_
}

void RepeatedULong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.RepeatedULong)
  // repeated uint64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.RepeatedULong)
}

::google::protobuf::uint8* RepeatedULong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.RepeatedULong)
  // repeated uint64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.RepeatedULong)
  return target;
}

int RepeatedULong::ByteSize() const {
  int total_size = 0;

  // repeated uint64 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedULong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatedULong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatedULong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatedULong::MergeFrom(const RepeatedULong& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatedULong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedULong::CopyFrom(const RepeatedULong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedULong::IsInitialized() const {

  return true;
}

void RepeatedULong::Swap(RepeatedULong* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatedULong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatedULong_descriptor_;
  metadata.reflection = RepeatedULong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedFloat::kValueFieldNumber;
#endif  // !_MSC_VER

RepeatedFloat::RepeatedFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.RepeatedFloat)
}

void RepeatedFloat::InitAsDefaultInstance() {
}

RepeatedFloat::RepeatedFloat(const RepeatedFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.RepeatedFloat)
}

void RepeatedFloat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedFloat::~RepeatedFloat() {
  // @@protoc_insertion_point(destructor:SCAMP.RepeatedFloat)
  SharedDtor();
}

void RepeatedFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatedFloat_descriptor_;
}

const RepeatedFloat& RepeatedFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

RepeatedFloat* RepeatedFloat::default_instance_ = NULL;

RepeatedFloat* RepeatedFloat::New() const {
  return new RepeatedFloat;
}

void RepeatedFloat::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatedFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.RepeatedFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (tag == 13) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.RepeatedFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.RepeatedFloat)
  return false;
#undef DO_
}

void RepeatedFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.RepeatedFloat)
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.RepeatedFloat)
}

::google::protobuf::uint8* RepeatedFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.RepeatedFloat)
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.RepeatedFloat)
  return target;
}

int RepeatedFloat::ByteSize() const {
  int total_size = 0;

  // repeated float value = 1;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatedFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatedFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatedFloat::MergeFrom(const RepeatedFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatedFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedFloat::CopyFrom(const RepeatedFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedFloat::IsInitialized() const {

  return true;
}

void RepeatedFloat::Swap(RepeatedFloat* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatedFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatedFloat_descriptor_;
  metadata.reflection = RepeatedFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedDouble::kValueFieldNumber;
#endif  // !_MSC_VER

RepeatedDouble::RepeatedDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.RepeatedDouble)
}

void RepeatedDouble::InitAsDefaultInstance() {
}

RepeatedDouble::RepeatedDouble(const RepeatedDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.RepeatedDouble)
}

void RepeatedDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedDouble::~RepeatedDouble() {
  // @@protoc_insertion_point(destructor:SCAMP.RepeatedDouble)
  SharedDtor();
}

void RepeatedDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatedDouble_descriptor_;
}

const RepeatedDouble& RepeatedDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

RepeatedDouble* RepeatedDouble::default_instance_ = NULL;

RepeatedDouble* RepeatedDouble::New() const {
  return new RepeatedDouble;
}

void RepeatedDouble::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepeatedDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.RepeatedDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (tag == 9) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.RepeatedDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.RepeatedDouble)
  return false;
#undef DO_
}

void RepeatedDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.RepeatedDouble)
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.RepeatedDouble)
}

::google::protobuf::uint8* RepeatedDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.RepeatedDouble)
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.RepeatedDouble)
  return target;
}

int RepeatedDouble::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatedDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatedDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepeatedDouble::MergeFrom(const RepeatedDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepeatedDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedDouble::CopyFrom(const RepeatedDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedDouble::IsInitialized() const {

  return true;
}

void RepeatedDouble::Swap(RepeatedDouble* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepeatedDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatedDouble_descriptor_;
  metadata.reflection = RepeatedDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfileData::kUint32ValueFieldNumber;
const int ProfileData::kUint64ValueFieldNumber;
const int ProfileData::kFloatValueFieldNumber;
const int ProfileData::kDoubleValueFieldNumber;
#endif  // !_MSC_VER

ProfileData::ProfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.ProfileData)
}

void ProfileData::InitAsDefaultInstance() {
  ProfileData_default_oneof_instance_->uint32_value_ = const_cast< ::SCAMP::RepeatedUInt*>(&::SCAMP::RepeatedUInt::default_instance());
  ProfileData_default_oneof_instance_->uint64_value_ = const_cast< ::SCAMP::RepeatedULong*>(&::SCAMP::RepeatedULong::default_instance());
  ProfileData_default_oneof_instance_->float_value_ = const_cast< ::SCAMP::RepeatedFloat*>(&::SCAMP::RepeatedFloat::default_instance());
  ProfileData_default_oneof_instance_->double_value_ = const_cast< ::SCAMP::RepeatedDouble*>(&::SCAMP::RepeatedDouble::default_instance());
}

ProfileData::ProfileData(const ProfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.ProfileData)
}

void ProfileData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Data();
}

ProfileData::~ProfileData() {
  // @@protoc_insertion_point(destructor:SCAMP.ProfileData)
  SharedDtor();
}

void ProfileData::SharedDtor() {
  if (has_Data()) {
    clear_Data();
  }
  if (this != default_instance_) {
  }
}

void ProfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileData_descriptor_;
}

const ProfileData& ProfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

ProfileData* ProfileData::default_instance_ = NULL;

ProfileData* ProfileData::New() const {
  return new ProfileData;
}

void ProfileData::clear_Data() {
  switch(Data_case()) {
    case kUint32Value: {
      delete Data_.uint32_value_;
      break;
    }
    case kUint64Value: {
      delete Data_.uint64_value_;
      break;
    }
    case kFloatValue: {
      delete Data_.float_value_;
      break;
    }
    case kDoubleValue: {
      delete Data_.double_value_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ProfileData::Clear() {
  clear_Data();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.ProfileData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCAMP.RepeatedUInt uint32_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint32_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uint64_value;
        break;
      }

      // optional .SCAMP.RepeatedULong uint64_value = 2;
      case 2: {
        if (tag == 18) {
         parse_uint64_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint64_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_float_value;
        break;
      }

      // optional .SCAMP.RepeatedFloat float_value = 3;
      case 3: {
        if (tag == 26) {
         parse_float_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_double_value;
        break;
      }

      // optional .SCAMP.RepeatedDouble double_value = 4;
      case 4: {
        if (tag == 34) {
         parse_double_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.ProfileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.ProfileData)
  return false;
#undef DO_
}

void ProfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.ProfileData)
  // optional .SCAMP.RepeatedUInt uint32_value = 1;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uint32_value(), output);
  }

  // optional .SCAMP.RepeatedULong uint64_value = 2;
  if (has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_value(), output);
  }

  // optional .SCAMP.RepeatedFloat float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->float_value(), output);
  }

  // optional .SCAMP.RepeatedDouble double_value = 4;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->double_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.ProfileData)
}

::google::protobuf::uint8* ProfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.ProfileData)
  // optional .SCAMP.RepeatedUInt uint32_value = 1;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uint32_value(), target);
  }

  // optional .SCAMP.RepeatedULong uint64_value = 2;
  if (has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_value(), target);
  }

  // optional .SCAMP.RepeatedFloat float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->float_value(), target);
  }

  // optional .SCAMP.RepeatedDouble double_value = 4;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->double_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.ProfileData)
  return target;
}

int ProfileData::ByteSize() const {
  int total_size = 0;

  switch (Data_case()) {
    // optional .SCAMP.RepeatedUInt uint32_value = 1;
    case kUint32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uint32_value());
      break;
    }
    // optional .SCAMP.RepeatedULong uint64_value = 2;
    case kUint64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uint64_value());
      break;
    }
    // optional .SCAMP.RepeatedFloat float_value = 3;
    case kFloatValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_value());
      break;
    }
    // optional .SCAMP.RepeatedDouble double_value = 4;
    case kDoubleValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->double_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfileData::MergeFrom(const ProfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Data_case()) {
    case kUint32Value: {
      mutable_uint32_value()->::SCAMP::RepeatedUInt::MergeFrom(from.uint32_value());
      break;
    }
    case kUint64Value: {
      mutable_uint64_value()->::SCAMP::RepeatedULong::MergeFrom(from.uint64_value());
      break;
    }
    case kFloatValue: {
      mutable_float_value()->::SCAMP::RepeatedFloat::MergeFrom(from.float_value());
      break;
    }
    case kDoubleValue: {
      mutable_double_value()->::SCAMP::RepeatedDouble::MergeFrom(from.double_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileData::CopyFrom(const ProfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileData::IsInitialized() const {

  return true;
}

void ProfileData::Swap(ProfileData* other) {
  if (other != this) {
    std::swap(Data_, other->Data_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileData_descriptor_;
  metadata.reflection = ProfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Profile::kDataFieldNumber;
const int Profile::kTypeFieldNumber;
#endif  // !_MSC_VER

Profile::Profile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.Profile)
}

void Profile::InitAsDefaultInstance() {
}

Profile::Profile(const Profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.Profile)
}

void Profile::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:SCAMP.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profile_descriptor_;
}

const Profile& Profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

Profile* Profile::default_instance_ = NULL;

Profile* Profile::New() const {
  return new Profile;
}

void Profile::Clear() {
  type_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.Profile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCAMP.ProfileData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SCAMP.SCAMPProfileType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCAMP::SCAMPProfileType_IsValid(value)) {
            set_type(static_cast< ::SCAMP::SCAMPProfileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.Profile)
  return false;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.Profile)
  // repeated .SCAMP.ProfileData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional .SCAMP.SCAMPProfileType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.Profile)
}

::google::protobuf::uint8* Profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.Profile)
  // repeated .SCAMP.ProfileData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional .SCAMP.SCAMPProfileType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.Profile)
  return target;
}

int Profile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .SCAMP.SCAMPProfileType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .SCAMP.ProfileData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {

  return true;
}

void Profile::Swap(Profile* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Profile_descriptor_;
  metadata.reflection = Profile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SCAMPTileInfo::SCAMPTileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.SCAMPTileInfo)
}

void SCAMPTileInfo::InitAsDefaultInstance() {
}

SCAMPTileInfo::SCAMPTileInfo(const SCAMPTileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.SCAMPTileInfo)
}

void SCAMPTileInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCAMPTileInfo::~SCAMPTileInfo() {
  // @@protoc_insertion_point(destructor:SCAMP.SCAMPTileInfo)
  SharedDtor();
}

void SCAMPTileInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCAMPTileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCAMPTileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAMPTileInfo_descriptor_;
}

const SCAMPTileInfo& SCAMPTileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

SCAMPTileInfo* SCAMPTileInfo::default_instance_ = NULL;

SCAMPTileInfo* SCAMPTileInfo::New() const {
  return new SCAMPTileInfo;
}

void SCAMPTileInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCAMPTileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.SCAMPTileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.SCAMPTileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.SCAMPTileInfo)
  return false;
#undef DO_
}

void SCAMPTileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.SCAMPTileInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.SCAMPTileInfo)
}

::google::protobuf::uint8* SCAMPTileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.SCAMPTileInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.SCAMPTileInfo)
  return target;
}

int SCAMPTileInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCAMPTileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCAMPTileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCAMPTileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCAMPTileInfo::MergeFrom(const SCAMPTileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCAMPTileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAMPTileInfo::CopyFrom(const SCAMPTileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAMPTileInfo::IsInitialized() const {

  return true;
}

void SCAMPTileInfo::Swap(SCAMPTileInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCAMPTileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCAMPTileInfo_descriptor_;
  metadata.reflection = SCAMPTileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCAMPArgs::kTimeseriesAFieldNumber;
const int SCAMPArgs::kTimeseriesBFieldNumber;
const int SCAMPArgs::kProfileAFieldNumber;
const int SCAMPArgs::kProfileBFieldNumber;
const int SCAMPArgs::kHasBFieldNumber;
const int SCAMPArgs::kWindowFieldNumber;
const int SCAMPArgs::kMaxTileSizeFieldNumber;
const int SCAMPArgs::kDistributedStartRowFieldNumber;
const int SCAMPArgs::kDistributedStartColFieldNumber;
const int SCAMPArgs::kDistanceThresholdFieldNumber;
const int SCAMPArgs::kPrecisionTypeFieldNumber;
const int SCAMPArgs::kProfileTypeFieldNumber;
const int SCAMPArgs::kComputingRowsFieldNumber;
const int SCAMPArgs::kComputingColumnsFieldNumber;
const int SCAMPArgs::kKeepRowsSeparateFieldNumber;
const int SCAMPArgs::kIsAlignedFieldNumber;
#endif  // !_MSC_VER

SCAMPArgs::SCAMPArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCAMP.SCAMPArgs)
}

void SCAMPArgs::InitAsDefaultInstance() {
  profile_a_ = const_cast< ::SCAMP::Profile*>(&::SCAMP::Profile::default_instance());
  profile_b_ = const_cast< ::SCAMP::Profile*>(&::SCAMP::Profile::default_instance());
}

SCAMPArgs::SCAMPArgs(const SCAMPArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCAMP.SCAMPArgs)
}

void SCAMPArgs::SharedCtor() {
  _cached_size_ = 0;
  profile_a_ = NULL;
  profile_b_ = NULL;
  has_b_ = false;
  window_ = GOOGLE_ULONGLONG(0);
  max_tile_size_ = GOOGLE_ULONGLONG(0);
  distributed_start_row_ = GOOGLE_LONGLONG(0);
  distributed_start_col_ = GOOGLE_LONGLONG(0);
  distance_threshold_ = 0;
  precision_type_ = 0;
  profile_type_ = 0;
  computing_rows_ = false;
  computing_columns_ = false;
  keep_rows_separate_ = false;
  is_aligned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCAMPArgs::~SCAMPArgs() {
  // @@protoc_insertion_point(destructor:SCAMP.SCAMPArgs)
  SharedDtor();
}

void SCAMPArgs::SharedDtor() {
  if (this != default_instance_) {
    delete profile_a_;
    delete profile_b_;
  }
}

void SCAMPArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCAMPArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAMPArgs_descriptor_;
}

const SCAMPArgs& SCAMPArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCAMP_2eproto();
  return *default_instance_;
}

SCAMPArgs* SCAMPArgs::default_instance_ = NULL;

SCAMPArgs* SCAMPArgs::New() const {
  return new SCAMPArgs;
}

void SCAMPArgs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SCAMPArgs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(window_, distributed_start_row_);
    if (has_profile_a()) {
      if (profile_a_ != NULL) profile_a_->::SCAMP::Profile::Clear();
    }
    if (has_profile_b()) {
      if (profile_b_ != NULL) profile_b_->::SCAMP::Profile::Clear();
    }
    has_b_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(distributed_start_col_, precision_type_);
    ZR_(computing_rows_, is_aligned_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  timeseries_a_.Clear();
  timeseries_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCAMPArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCAMP.SCAMPArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double timeseries_a = 1;
      case 1: {
        if (tag == 9) {
         parse_timeseries_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_timeseries_a())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_timeseries_a())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_timeseries_a;
        if (input->ExpectTag(17)) goto parse_timeseries_b;
        break;
      }

      // repeated double timeseries_b = 2;
      case 2: {
        if (tag == 17) {
         parse_timeseries_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_timeseries_b())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_timeseries_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeseries_b;
        if (input->ExpectTag(26)) goto parse_profile_a;
        break;
      }

      // optional .SCAMP.Profile profile_a = 3;
      case 3: {
        if (tag == 26) {
         parse_profile_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_profile_b;
        break;
      }

      // optional .SCAMP.Profile profile_b = 4;
      case 4: {
        if (tag == 34) {
         parse_profile_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_has_b;
        break;
      }

      // optional bool has_b = 5;
      case 5: {
        if (tag == 40) {
         parse_has_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_b_)));
          set_has_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_window;
        break;
      }

      // optional uint64 window = 6;
      case 6: {
        if (tag == 48) {
         parse_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &window_)));
          set_has_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_tile_size;
        break;
      }

      // optional uint64 max_tile_size = 7;
      case 7: {
        if (tag == 56) {
         parse_max_tile_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_tile_size_)));
          set_has_max_tile_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_distributed_start_row;
        break;
      }

      // optional int64 distributed_start_row = 8;
      case 8: {
        if (tag == 64) {
         parse_distributed_start_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &distributed_start_row_)));
          set_has_distributed_start_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_distributed_start_col;
        break;
      }

      // optional int64 distributed_start_col = 9;
      case 9: {
        if (tag == 72) {
         parse_distributed_start_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &distributed_start_col_)));
          set_has_distributed_start_col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_distance_threshold;
        break;
      }

      // optional double distance_threshold = 10;
      case 10: {
        if (tag == 81) {
         parse_distance_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_threshold_)));
          set_has_distance_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_precision_type;
        break;
      }

      // optional .SCAMP.SCAMPPrecisionType precision_type = 11;
      case 11: {
        if (tag == 88) {
         parse_precision_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCAMP::SCAMPPrecisionType_IsValid(value)) {
            set_precision_type(static_cast< ::SCAMP::SCAMPPrecisionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_profile_type;
        break;
      }

      // optional .SCAMP.SCAMPProfileType profile_type = 12;
      case 12: {
        if (tag == 96) {
         parse_profile_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCAMP::SCAMPProfileType_IsValid(value)) {
            set_profile_type(static_cast< ::SCAMP::SCAMPProfileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_computing_rows;
        break;
      }

      // optional bool computing_rows = 13;
      case 13: {
        if (tag == 104) {
         parse_computing_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &computing_rows_)));
          set_has_computing_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_computing_columns;
        break;
      }

      // optional bool computing_columns = 14;
      case 14: {
        if (tag == 112) {
         parse_computing_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &computing_columns_)));
          set_has_computing_columns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_keep_rows_separate;
        break;
      }

      // optional bool keep_rows_separate = 15;
      case 15: {
        if (tag == 120) {
         parse_keep_rows_separate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_rows_separate_)));
          set_has_keep_rows_separate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_aligned;
        break;
      }

      // optional bool is_aligned = 16;
      case 16: {
        if (tag == 128) {
         parse_is_aligned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_aligned_)));
          set_has_is_aligned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCAMP.SCAMPArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCAMP.SCAMPArgs)
  return false;
#undef DO_
}

void SCAMPArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCAMP.SCAMPArgs)
  // repeated double timeseries_a = 1;
  for (int i = 0; i < this->timeseries_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->timeseries_a(i), output);
  }

  // repeated double timeseries_b = 2;
  for (int i = 0; i < this->timeseries_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->timeseries_b(i), output);
  }

  // optional .SCAMP.Profile profile_a = 3;
  if (has_profile_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->profile_a(), output);
  }

  // optional .SCAMP.Profile profile_b = 4;
  if (has_profile_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->profile_b(), output);
  }

  // optional bool has_b = 5;
  if (has_has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_b(), output);
  }

  // optional uint64 window = 6;
  if (has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->window(), output);
  }

  // optional uint64 max_tile_size = 7;
  if (has_max_tile_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->max_tile_size(), output);
  }

  // optional int64 distributed_start_row = 8;
  if (has_distributed_start_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->distributed_start_row(), output);
  }

  // optional int64 distributed_start_col = 9;
  if (has_distributed_start_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->distributed_start_col(), output);
  }

  // optional double distance_threshold = 10;
  if (has_distance_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->distance_threshold(), output);
  }

  // optional .SCAMP.SCAMPPrecisionType precision_type = 11;
  if (has_precision_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->precision_type(), output);
  }

  // optional .SCAMP.SCAMPProfileType profile_type = 12;
  if (has_profile_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->profile_type(), output);
  }

  // optional bool computing_rows = 13;
  if (has_computing_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->computing_rows(), output);
  }

  // optional bool computing_columns = 14;
  if (has_computing_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->computing_columns(), output);
  }

  // optional bool keep_rows_separate = 15;
  if (has_keep_rows_separate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->keep_rows_separate(), output);
  }

  // optional bool is_aligned = 16;
  if (has_is_aligned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_aligned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCAMP.SCAMPArgs)
}

::google::protobuf::uint8* SCAMPArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCAMP.SCAMPArgs)
  // repeated double timeseries_a = 1;
  for (int i = 0; i < this->timeseries_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->timeseries_a(i), target);
  }

  // repeated double timeseries_b = 2;
  for (int i = 0; i < this->timeseries_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->timeseries_b(i), target);
  }

  // optional .SCAMP.Profile profile_a = 3;
  if (has_profile_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->profile_a(), target);
  }

  // optional .SCAMP.Profile profile_b = 4;
  if (has_profile_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->profile_b(), target);
  }

  // optional bool has_b = 5;
  if (has_has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_b(), target);
  }

  // optional uint64 window = 6;
  if (has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->window(), target);
  }

  // optional uint64 max_tile_size = 7;
  if (has_max_tile_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_tile_size(), target);
  }

  // optional int64 distributed_start_row = 8;
  if (has_distributed_start_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->distributed_start_row(), target);
  }

  // optional int64 distributed_start_col = 9;
  if (has_distributed_start_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->distributed_start_col(), target);
  }

  // optional double distance_threshold = 10;
  if (has_distance_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->distance_threshold(), target);
  }

  // optional .SCAMP.SCAMPPrecisionType precision_type = 11;
  if (has_precision_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->precision_type(), target);
  }

  // optional .SCAMP.SCAMPProfileType profile_type = 12;
  if (has_profile_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->profile_type(), target);
  }

  // optional bool computing_rows = 13;
  if (has_computing_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->computing_rows(), target);
  }

  // optional bool computing_columns = 14;
  if (has_computing_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->computing_columns(), target);
  }

  // optional bool keep_rows_separate = 15;
  if (has_keep_rows_separate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->keep_rows_separate(), target);
  }

  // optional bool is_aligned = 16;
  if (has_is_aligned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_aligned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCAMP.SCAMPArgs)
  return target;
}

int SCAMPArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .SCAMP.Profile profile_a = 3;
    if (has_profile_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile_a());
    }

    // optional .SCAMP.Profile profile_b = 4;
    if (has_profile_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile_b());
    }

    // optional bool has_b = 5;
    if (has_has_b()) {
      total_size += 1 + 1;
    }

    // optional uint64 window = 6;
    if (has_window()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->window());
    }

    // optional uint64 max_tile_size = 7;
    if (has_max_tile_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_tile_size());
    }

    // optional int64 distributed_start_row = 8;
    if (has_distributed_start_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->distributed_start_row());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 distributed_start_col = 9;
    if (has_distributed_start_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->distributed_start_col());
    }

    // optional double distance_threshold = 10;
    if (has_distance_threshold()) {
      total_size += 1 + 8;
    }

    // optional .SCAMP.SCAMPPrecisionType precision_type = 11;
    if (has_precision_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision_type());
    }

    // optional .SCAMP.SCAMPProfileType profile_type = 12;
    if (has_profile_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profile_type());
    }

    // optional bool computing_rows = 13;
    if (has_computing_rows()) {
      total_size += 1 + 1;
    }

    // optional bool computing_columns = 14;
    if (has_computing_columns()) {
      total_size += 1 + 1;
    }

    // optional bool keep_rows_separate = 15;
    if (has_keep_rows_separate()) {
      total_size += 1 + 1;
    }

    // optional bool is_aligned = 16;
    if (has_is_aligned()) {
      total_size += 2 + 1;
    }

  }
  // repeated double timeseries_a = 1;
  {
    int data_size = 0;
    data_size = 8 * this->timeseries_a_size();
    total_size += 1 * this->timeseries_a_size() + data_size;
  }

  // repeated double timeseries_b = 2;
  {
    int data_size = 0;
    data_size = 8 * this->timeseries_b_size();
    total_size += 1 * this->timeseries_b_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCAMPArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCAMPArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCAMPArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCAMPArgs::MergeFrom(const SCAMPArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  timeseries_a_.MergeFrom(from.timeseries_a_);
  timeseries_b_.MergeFrom(from.timeseries_b_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_profile_a()) {
      mutable_profile_a()->::SCAMP::Profile::MergeFrom(from.profile_a());
    }
    if (from.has_profile_b()) {
      mutable_profile_b()->::SCAMP::Profile::MergeFrom(from.profile_b());
    }
    if (from.has_has_b()) {
      set_has_b(from.has_b());
    }
    if (from.has_window()) {
      set_window(from.window());
    }
    if (from.has_max_tile_size()) {
      set_max_tile_size(from.max_tile_size());
    }
    if (from.has_distributed_start_row()) {
      set_distributed_start_row(from.distributed_start_row());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_distributed_start_col()) {
      set_distributed_start_col(from.distributed_start_col());
    }
    if (from.has_distance_threshold()) {
      set_distance_threshold(from.distance_threshold());
    }
    if (from.has_precision_type()) {
      set_precision_type(from.precision_type());
    }
    if (from.has_profile_type()) {
      set_profile_type(from.profile_type());
    }
    if (from.has_computing_rows()) {
      set_computing_rows(from.computing_rows());
    }
    if (from.has_computing_columns()) {
      set_computing_columns(from.computing_columns());
    }
    if (from.has_keep_rows_separate()) {
      set_keep_rows_separate(from.keep_rows_separate());
    }
    if (from.has_is_aligned()) {
      set_is_aligned(from.is_aligned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCAMPArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAMPArgs::CopyFrom(const SCAMPArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAMPArgs::IsInitialized() const {

  return true;
}

void SCAMPArgs::Swap(SCAMPArgs* other) {
  if (other != this) {
    timeseries_a_.Swap(&other->timeseries_a_);
    timeseries_b_.Swap(&other->timeseries_b_);
    std::swap(profile_a_, other->profile_a_);
    std::swap(profile_b_, other->profile_b_);
    std::swap(has_b_, other->has_b_);
    std::swap(window_, other->window_);
    std::swap(max_tile_size_, other->max_tile_size_);
    std::swap(distributed_start_row_, other->distributed_start_row_);
    std::swap(distributed_start_col_, other->distributed_start_col_);
    std::swap(distance_threshold_, other->distance_threshold_);
    std::swap(precision_type_, other->precision_type_);
    std::swap(profile_type_, other->profile_type_);
    std::swap(computing_rows_, other->computing_rows_);
    std::swap(computing_columns_, other->computing_columns_);
    std::swap(keep_rows_separate_, other->keep_rows_separate_);
    std::swap(is_aligned_, other->is_aligned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCAMPArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCAMPArgs_descriptor_;
  metadata.reflection = SCAMPArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SCAMP

// @@protoc_insertion_point(global_scope)
